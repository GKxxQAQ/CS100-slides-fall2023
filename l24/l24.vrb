\frametitle{Move operations are often \ilcpp {noexcept}.}
Since C++11, a reasonable optimization is to \textbf{move} elements, instead of copying them.

  Unlike copy, \textbf{move} of an element is a modifying operation.
  \begin{itemize}
    \item The old elements are modified during this procedure.
    \item If a move throws an exception, there is no way of rolling back!
  \end{itemize}

  Due to this consideration, \ilcpp{std::vector<T>} uses the move operation of \ilcpp{T} \textbf{only when it is \ilcpp{noexcept}}.
  \begin{cpp}
    for (auto p = m_storage; p != m_end_of_elem; ++p)
      construct_object_at(q++, @\redtt{std::move\_if\_noexcept(*p)}@);
  \end{cpp}
